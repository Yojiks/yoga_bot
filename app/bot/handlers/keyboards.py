from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from collections import defaultdict
from app.common.models import Slot
import calendar

main = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã', callback_data='free_slots')],
    [InlineKeyboardButton(text='–ú–æ–∏ –±—Ä–æ–Ω–∏', callback_data='my_bookings'), 
     InlineKeyboardButton(text='–ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='contacts')]
])

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
WEEKDAYS_RU = {
    'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
    'Wednesday': '–°—Ä–µ–¥–∞',
    'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
    'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
    'Saturday': '–°—É–±–±–æ—Ç–∞',
    'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
}


def chunked(lst, n):
    """–†–∞–∑–¥–µ–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–¥—Å–ø–∏—Å–∫–∏ –ø–æ n —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    for i in range(0, len(lst), n):
        yield lst[i:i + n]
        

async def inline_slots(slots: list[Slot]) -> InlineKeyboardMarkup:
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    grouped = defaultdict(list)

    for slot in slots:
        weekday_en = calendar.day_name[slot.date.weekday()]
        grouped[weekday_en].append(slot)

    # –ü–æ—Ä—è–¥–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    weekday_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
    for day_en in weekday_order:
        if day_en not in grouped:
            continue

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        markup.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"üìÖ {WEEKDAYS_RU[day_en]}",
                callback_data="none"
            )
        ])

        # –ö–Ω–æ–ø–∫–∏ —Å–ª–æ—Ç–æ–≤ –ø–æ 2 –≤ —Ä—è–¥
        day_slots = grouped[day_en]
        row_buttons = [
            InlineKeyboardButton(
                text=slot.date.strftime("%H:%M"),
                callback_data=f"slot_{slot.id}"
            )
            for slot in day_slots
        ]

        for row in chunked(row_buttons, 2):
            markup.inline_keyboard.append(row)

    # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª
    markup.inline_keyboard.append([
        InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="go_back")
    ])

    return markup


def my_bookings_keyboard(bookings: list) -> InlineKeyboardMarkup:
    keyboard = []
    
    
    for booking in bookings:
        dt_str = booking.slot.date.strftime('%d.%m %H:%M')
        
        if not booking.is_paid:
            buttons_row = [
                InlineKeyboardButton(
                    text=f"‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å {dt_str}",
                    callback_data=f"pay_{booking.id}"
                ),
                InlineKeyboardButton(
                    text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {dt_str}",
                    callback_data=f"cancel_{booking.id}"
                )
            ]
            keyboard.append(buttons_row)
        
    keyboard.append([
        InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="go_back")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def go_back_markup() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄ –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="go_back")]
    ])
    