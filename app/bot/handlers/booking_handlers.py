from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from sqlalchemy.orm import selectinload
from sqlalchemy import select

from app.common.requests import get_user_by_tg_id
from app.common.models import User, Slot, Booking, async_session
from app.bot.middlewares import TestMiddleware

import app.bot.handlers.keyboards as kb
import app.common.requests as rq
from app.bot.handlers.keyboards import go_back_markup
from app.common.requests import BookingResult

router = Router()

router.message.outer_middleware(TestMiddleware())

class Reg(StatesGroup):
    name = State()
    email = State()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    user = await get_user_by_tg_id(tg_id)
    
    if user:
        await message.answer(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\nEmail: {user.email}", reply_markup=kb.main)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π email:")
        await state.set_state(Reg.email)
    
    
@router.message(Reg.email)
async def process_email(message: Message, state: FSMContext):
    email = message.text
    
    await rq.set_user(tg_id=message.from_user.id, email=email)

    await message.answer(f"–°–ø–∞—Å–∏–±–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\nEmail: {email}")
    await state.clear()
    
    
@router.callback_query(F.data == 'free_slots')
async def show_slots(callback: CallbackQuery):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã')
    
    async with async_session() as session:
        result = await session.execute(select(Slot).order_by(Slot.date))
        slots = result.scalars().all()
        
    print(f"[DEBUG] –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: {len(slots)}")
    for s in slots:
        print(f"[DEBUG] –°–ª–æ—Ç: {s.id}, date={s.date}, type={type(s.date)}")
        
    if not slots:
        await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
        return
        
    markup = await kb.inline_slots(slots)
    await callback.message.edit_text("–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:", reply_markup=markup)
    

@router.callback_query(F.data == 'contacts')
async def contacts(callback: CallbackQuery):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã')
    
    await callback.message.edit_text(
        "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏: +79885556644",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥",   callback_data="go_back")]
        ])
    )

ADMINS = [793734889]

@router.callback_query(F.data.startswith("confirm_payment_"))
async def notify_admin(callback: CallbackQuery):
    booking_id = int(callback.data.split("_")[2])
    bot = callback.bot  # –±–µ—Ä—ë–º Bot –∏–∑ callback

    # 1) –í–Ω—É—Ç—Ä–∏ —Å–µ—Å—Å–∏–∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∏ booking, –∏ slot
    async with async_session() as session:
        result = await session.execute(
            select(Booking)
            .options(selectinload(Booking.slot))    # <-- eager load slot
            .where(Booking.id == booking_id)
        )
        booking = result.scalar_one_or_none()
        if not booking:
            await callback.answer("–ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º User
        user = await session.get(User, booking.user_id)

        # –°—Ä–∞–∑—É –¥–æ—Å—Ç–∞—ë–º –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ
        slot = booking.slot
        dt     = slot.date.strftime("%d.%m %H:%M")
        amount = slot.price_per_person
        code   = booking.confirmation_code

    # 2) –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = (
        f"üí≥ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã*\n\n"
        f"üìß Email: `{user.email}`\n"
        f"üìÖ –°–ª–æ—Ç: *{dt}*\n"
        f"üí∞ –°—É–º–º–∞: *{amount} ‚ÇΩ*\n"
        f"üîë –ö–æ–¥: `{code}`\n\n"
        f"Booking ID: {booking.id}"
    )

    # 3) –†–∞–∑–¥–∞—ë–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMINS:
        await bot.send_message(
            chat_id=admin_id,
            text=msg,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        callback_data=f"admin_confirm_{booking_id}"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                        callback_data="my_bookings"
                    )
                ]
            ])
        )

    # 4) –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞—è–≤–∫–∞ —É—à–ª–∞
    await callback.message.edit_text(
        "–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄ –ù–∞ –≥–ª–∞–≤–Ω—É—é",   callback_data="go_back")]
        ])
    )
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_"))
async def confirm_booking(callback: CallbackQuery):
    
    user_tg_id = callback.from_user.id
    slot_id = int(callback.data.split("_")[1])

    result, message = await rq.book_slot(user_tg_id, slot_id)
    
    if result == BookingResult.SUCCESS:
        await callback.message.edit_text(message)
    else: 
        await callback.message.edit_text(message, reply_markup=go_back_markup())
    
    await callback.answer()
    
    
@router.callback_query(F.data.startswith("slot_"))
async def confirm_slot(callback: CallbackQuery):
    slot_id = int(callback.data.split("_")[1])

    WEEKDAYS_RU = {
    'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
    'Wednesday': '–°—Ä–µ–¥–∞',
    'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
    'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
    'Saturday': '–°—É–±–±–æ—Ç–∞',
    'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
}
    
    async with async_session() as session:
        slot = await session.get(Slot, slot_id)

    if not slot:
        await callback.answer("–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    day_ru = WEEKDAYS_RU[slot.date.strftime("%A")]
    time_text = f"{day_ru} {slot.date.strftime('%d.%m %H:%M')}"

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_{slot_id}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_booking")
        ]
    ])

    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {time_text}?",
        reply_markup=markup
    )
    await callback.answer()


@router.callback_query(F.data == 'my_bookings')
async def my_bookings(callback: CallbackQuery):
    user_id = callback.from_user.id
    bookings = await rq.get_user_bookings(user_id)
    
    if not bookings:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
        await callback.answer()
        return
    
    WEEKDAYS_RU = {
    'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
    'Wednesday': '–°—Ä–µ–¥–∞',
    'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
    'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
    'Saturday': '–°—É–±–±–æ—Ç–∞',
    'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
    }

    text = "–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
    for i,b in enumerate(bookings, 1):
        day = WEEKDAYS_RU[b.slot.date.strftime("%A")]
        dt = b.slot.date.strftime("%d.%m %H.%M")
        status = "–û–ø–ª–∞—á–µ–Ω–æ" if b.is_paid else "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
        text += f"{i}. {day} {dt} - {status}\n"
        
    await callback.message.edit_text(text, reply_markup=kb.my_bookings_keyboard(bookings))
    await callback.answer()
    
    
@router.callback_query(F.data.startswith("cancel_"))
async def cancel_booking(callback: CallbackQuery):
    booking_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    success = await rq.delete_booking(booking_id, user_id)
    
    if success:
        await callback.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await callback.answer("–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –±—Ä–æ–Ω—å. ", show_alert=True)
        
    await my_bookings(callback)
    
    
@router.callback_query(F.data.startswith("pay_"))
async def handle_payment(callback: CallbackQuery):
    booking_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    success, code, booking = await rq.prepare_payment(booking_id, user_id)
    
    if not success:
        await callback.answer(code, show_alert=True)
        return
    
    cost = booking.slot.price_per_person
    dt = booking.slot.date.strftime("%d.%m %H:%M")
    
    #—Å–º—Å –∫–ª–∏–µ–Ω—Ç—É
    await callback.message.edit_text(
        f"üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞ —Å–ª–æ—Ç {dt}\n"
        f"–°—É–º–º–∞: {cost} ‚ÇΩ\n\n"
        f"üëâ –†–µ–∫–≤–∏–∑–∏—Ç—ã: `1234 5678 9012 3456`\n"
        f"‚ÄºÔ∏è –í –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ: `{code}`\n\n"
        f"–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"confirm_payment_{booking_id}")],
            [InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥",   callback_data="my_bookings")]
        ])
    )
    await callback.answer()
        
        
@router.callback_query(F.data == 'go_back')
async def go_back(callback: CallbackQuery):
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.main)
    await callback.answer()

